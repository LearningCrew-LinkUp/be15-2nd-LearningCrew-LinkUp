package com.learningcrew.linkup.place.command.application.service;

import com.learningcrew.linkup.exception.BusinessException;
import com.learningcrew.linkup.exception.ErrorCode;
import com.learningcrew.linkup.meeting.command.domain.aggregate.Meeting;
import com.learningcrew.linkup.meeting.command.domain.aggregate.MeetingParticipationHistory;
import com.learningcrew.linkup.meeting.command.domain.repository.MeetingRepository;
import com.learningcrew.linkup.meeting.command.infrastructure.repository.JpaMeetingParticipationHistoryRepository;
import com.learningcrew.linkup.place.command.application.dto.request.PlaceReviewCreateRequest;
import com.learningcrew.linkup.place.command.domain.aggregate.entity.PlaceReview;
import com.learningcrew.linkup.place.command.domain.repository.PlaceReviewRepository;
import com.learningcrew.linkup.place.query.dto.response.PlaceReviewResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class PlaceReviewCommandService {

    private final JpaMeetingParticipationHistoryRepository participationRepository;
    private final MeetingRepository meetingRepository;
    private final PlaceReviewRepository placeReviewRepository;

    private static final int STATUS_REVIEW_WRITTEN = 2;

    public PlaceReviewResponse createReview(PlaceReviewCreateRequest request) {
        // Ï∞∏Ïó¨ Ïù¥Î†• Î®ºÏ†Ä Ï°∞Ìöå (statusÎäî Î™®Îì† ÏÉÅÌÉú Ìè¨Ìï®)
        List<MeetingParticipationHistory> participationList =
                participationRepository.findByMemberIdAndMeetingId(
                        request.getMemberId(), request.getMeetingId());

        if (participationList.isEmpty()) {
            throw new BusinessException(ErrorCode.REVIEW_NOT_ALLOWED, "Ìï¥Îãπ Î™®ÏûÑÏóêÏÑú Ïú†Ìö®Ìïú Ï∞∏Ïó¨ Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§.");
        }

        MeetingParticipationHistory participation = participationList.get(0);

        // üí° Ï§ëÎ≥µ Î¶¨Î∑∞ ÏûëÏÑ± Ïó¨Î∂Ä Í≤ÄÏÇ¨
        boolean alreadyWritten = placeReviewRepository.existsByParticipationId(participation.getParticipationId());
        if (alreadyWritten) {
            throw new BusinessException(ErrorCode.REVIEW_ALREADY_WRITTEN, "Ïù¥ÎØ∏ Î¶¨Î∑∞Î•º ÏûëÏÑ±ÌïòÏÖ®ÏäµÎãàÎã§.");
        }

        // Î™®ÏûÑ Î∞è Ïû•ÏÜå Ï†ïÎ≥¥ Ï°∞Ìöå
        Meeting meeting = meetingRepository.findById(request.getMeetingId())
                .orElseThrow(() -> new BusinessException(ErrorCode.MEETING_NOT_FOUND));

        // Î¶¨Î∑∞ Ï†ÄÏû•
        PlaceReview review = PlaceReview.builder()
                .memberId(request.getMemberId())
                .participationId(participation.getParticipationId())
                .placeId(meeting.getPlaceId())
                .statusId(STATUS_REVIEW_WRITTEN)
                .reviewContent(request.getReviewContent())
                .reviewImageUrl(request.getReviewImageUrl())
                .reviewScore(request.getReviewScore())
                .build();

        placeReviewRepository.save(review);

        return new PlaceReviewResponse(
                review.getReviewContent(),
                review.getReviewImageUrl(),
                review.getReviewScore()
        );
    }
}
