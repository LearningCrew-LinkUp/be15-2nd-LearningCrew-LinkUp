<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.learningcrew.linkup.report.query.mapper.ReportMapper">

    <!-- 신고 목록 조회 (상태별 필터링 추가) -->
    <select id="selectReports" resultType="com.learningcrew.linkup.report.query.dto.response.ReportDTO">
        SELECT
        rh.report_id,
        rh.reporter_member_id,
        ru.user_name AS reporter_name,
        rh.target_member_id,
        tu.user_name AS target_name,
        rh.report_type_id,
        rt.report_type AS report_type,
        rh.status_id AS statusId,
        rh.reason,
        rh.post_id,
        rh.comment_id,
        rh.created_at
        FROM report_history rh
        JOIN report_type rt ON rh.report_type_id = rt.report_type_id
        JOIN user ru ON rh.reporter_member_id = ru.user_id
        JOIN user tu ON rh.target_member_id = tu.user_id
        WHERE 1 = 1
        <if test="reporterMemberId != null">
            AND rh.reporter_member_id = #{reporterMemberId}
        </if>
        <if test="targetMemberId != null">
            AND rh.target_member_id = #{targetMemberId}
        </if>
        <if test="reportTypeId != null">
            AND rh.report_type_id = #{reportTypeId}
        </if>
        <if test="statusId != null">
            AND rh.status_id = #{statusId}  <!-- 상태별 필터링 추가 -->
        </if>
        ORDER BY rh.created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 신고 목록 전체 건수 조회 (상태별 필터링 추가) -->
    <select id="countReports" resultType="long">
        SELECT COUNT(*)
        FROM report_history rh
        WHERE 1 = 1
        <if test="reporterMemberId != null">
            AND rh.reporter_member_id = #{reporterMemberId}
        </if>
        <if test="targetMemberId != null">
            AND rh.target_member_id = #{targetMemberId}
        </if>
        <if test="reportTypeId != null">
            AND rh.report_type_id = #{reportTypeId}
        </if>
        <if test="statusId != null">
            AND rh.status_id = #{statusId}  <!-- 상태별 필터링 추가 -->
        </if>
    </select>

    <!-- 신고 상세 조회 -->
    <select id="selectReportById" resultType="com.learningcrew.linkup.report.query.dto.response.ReportDTO">
        SELECT
        rh.report_id,
        rh.reporter_member_id,
        ru.user_name AS reporter_name,
        rh.target_member_id,
        tu.user_name AS target_name,
        rh.report_type_id,
        rt.report_type AS report_type,
        rh.status_id AS statusId,
        rh.reason,
        rh.post_id,
        rh.comment_id,
        rh.created_at
        FROM report_history rh
        JOIN report_type rt ON rh.report_type_id = rt.report_type_id
        JOIN user ru ON rh.reporter_member_id = ru.user_id
        JOIN user tu ON rh.target_member_id = tu.user_id
        WHERE rh.report_id = #{reportId}
    </select>

    <!-- 신고 종류 조회 -->
    <select id="selectAllReportTypes" resultType="com.learningcrew.linkup.report.query.dto.response.ReportTypeDTO">
        SELECT report_type_id, report_type, report_level
        FROM report_type
        ORDER BY report_level DESC, report_type_id ASC
    </select>

    <!-- 신고 대상 별 목록 조회 -->
    <select id="selectReportTargetList" resultType="com.learningcrew.linkup.report.query.dto.response.ReportTargetDTO">
        SELECT
        CASE
        WHEN rh.post_id IS NOT NULL THEN 'POST'
        WHEN rh.comment_id IS NOT NULL THEN 'COMMENT'
        ELSE 'USER'
        END AS targetType,
        rh.target_member_id AS targetId,
        COUNT(*) AS reportCount,
        MAX(rh.created_at) AS lastReportDate,
        CASE
        WHEN rh.post_id IS NOT NULL THEN MAX(CASE WHEN cp.is_deleted = 'N' THEN 'Y' ELSE 'N' END)
        WHEN rh.comment_id IS NOT NULL THEN MAX(CASE WHEN cc.is_deleted = 'N' THEN 'Y' ELSE 'N' END)
        ELSE MAX(CASE WHEN u.deleted_at IS NULL THEN 'Y' ELSE 'N' END)
        END AS isActive
        FROM report_history rh
        LEFT JOIN community_post cp ON rh.post_id = cp.post_id
        LEFT JOIN community_comment cc ON rh.comment_id = cc.comment_id
        LEFT JOIN user u ON rh.target_member_id = u.user_id
        WHERE 1 = 1

        <!-- targetType이 'ALL'이 아닐 때만 필터 적용 -->
        <if test="targetType != null and targetType != 'ALL'">
            AND (
            (#{targetType} = 'POST' AND rh.post_id IS NOT NULL)
            OR (#{targetType} = 'COMMENT' AND rh.comment_id IS NOT NULL)
            OR (#{targetType} = 'USER' AND rh.post_id IS NULL AND rh.comment_id IS NULL)
            )
        </if>

        <if test="targetId != null">
            AND rh.target_member_id = #{targetId}
        </if>

        <if test="isActive != null and targetType != null and targetType != 'ALL'">
            AND (
            (#{targetType} = 'POST' AND cp.is_deleted =
            <choose>
                <when test="isActive == 'Y'">'N'</when>
                <otherwise>'Y'</otherwise>
            </choose>
            )
            OR (#{targetType} = 'COMMENT' AND cc.is_deleted =
            <choose>
                <when test="isActive == 'Y'">'N'</when>
                <otherwise>'Y'</otherwise>
            </choose>
            )
            OR (#{targetType} = 'USER' AND
            <choose>
                <when test="isActive == 'Y'">u.deleted_at IS NULL</when>
                <otherwise>u.deleted_at IS NOT NULL</otherwise>
            </choose>
            )
            )
        </if>

        GROUP BY targetType, targetId
        ORDER BY lastReportDate DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="countReportTargetList" resultType="long">
        SELECT COUNT(DISTINCT rh.target_member_id)
        FROM report_history rh
        LEFT JOIN community_post cp ON rh.post_id = cp.post_id
        LEFT JOIN community_comment cc ON rh.comment_id = cc.comment_id
        LEFT JOIN user u ON rh.target_member_id = u.user_id
        WHERE 1 = 1
        <if test="targetType != null">
            AND (
            (#{targetType} = 'POST' AND rh.post_id IS NOT NULL) OR
            (#{targetType} = 'COMMENT' AND rh.comment_id IS NOT NULL) OR
            (#{targetType} = 'USER' AND rh.post_id IS NULL AND rh.comment_id IS NULL)
            )
        </if>
        <if test="targetId != null">
            AND rh.target_member_id = #{targetId}
        </if>
        <if test="isActive != null">
            AND (
            (#{targetType} = 'POST' AND cp.is_deleted =
            <choose>
                <when test="isActive == 'Y'">'N'</when>
                <otherwise>'Y'</otherwise>
            </choose>
            )
            OR
            (#{targetType} = 'COMMENT' AND cc.is_deleted =
            <choose>
                <when test="isActive == 'Y'">'N'</when>
                <otherwise>'Y'</otherwise>
            </choose>
            )
            OR
            (#{targetType} = 'USER' AND
            <choose>
                <when test="isActive == 'Y'">u.deleted_at IS NULL</when>
                <otherwise>u.deleted_at IS NOT NULL</otherwise>
            </choose>
            )
            )
        </if>
    </select>



    <!-- 대상 기본 정보 조회 -->
    <select id="selectReportTargetInfo" resultType="com.learningcrew.linkup.report.query.dto.response.ReportTargetDTO">
        SELECT
        CASE
        WHEN rh.post_id IS NOT NULL THEN 'POST'
        WHEN rh.comment_id IS NOT NULL THEN 'COMMENT'
        ELSE 'USER'
        END AS targetType,
        rh.target_member_id AS targetId,
        COUNT(*) AS reportCount,
        MAX(rh.created_at) AS lastReportDate,
        CASE
        WHEN rh.post_id IS NOT NULL THEN MAX(CASE WHEN cp.is_deleted = 'N' THEN 'Y' ELSE 'N' END)
        WHEN rh.comment_id IS NOT NULL THEN MAX(CASE WHEN cc.is_deleted = 'N' THEN 'Y' ELSE 'N' END)
        ELSE MAX(CASE WHEN u.deleted_at IS NULL THEN 'Y' ELSE 'N' END)
        END AS isActive
        FROM report_history rh
        LEFT JOIN community_post cp ON rh.post_id = cp.post_id
        LEFT JOIN community_comment cc ON rh.comment_id = cc.comment_id
        LEFT JOIN user u ON rh.target_member_id = u.user_id
        WHERE rh.target_member_id = #{targetId}
        <if test="targetType != null">
            AND (
            (#{targetType} = 'POST' AND rh.post_id IS NOT NULL) OR
            (#{targetType} = 'COMMENT' AND rh.comment_id IS NOT NULL) OR
            (#{targetType} = 'USER' AND rh.post_id IS NULL AND rh.comment_id IS NULL)
            )
        </if>
    </select>

    <resultMap id="ReportTargetDetailMap" type="com.learningcrew.linkup.report.query.dto.response.ReportTargetDTO">
        <result property="targetType" column="targetType" />
        <result property="targetId" column="targetId" />
        <result property="reportCount" column="reportCount" />
        <result property="lastReportDate" column="lastReportDate" />
        <result property="isActive" column="isActive" />
        <collection property="reportList" ofType="com.learningcrew.linkup.report.query.dto.response.ReportSimpleDTO"
                    select="selectReportsByTarget"
                    column="{targetType=targetType, targetId=targetId}" />
    </resultMap>


    <!-- 대상 관련 신고 목록 조회 -->
    <select id="selectReportsByTarget" resultType="com.learningcrew.linkup.report.query.dto.response.ReportSimpleDTO">
        SELECT
        rh.report_id AS reportId,
        rh.reporter_member_id AS reporterId,
        ru.user_name AS reporterName,
        rt.report_type AS reportType,
        rh.created_at AS createdAt,
        rh.status_id AS statusId,
        CASE
        WHEN rh.post_id IS NOT NULL THEN
        (SELECT cp.is_deleted FROM community_post cp WHERE cp.post_id = rh.post_id)
        WHEN rh.comment_id IS NOT NULL THEN
        (SELECT cc.is_deleted FROM community_comment cc WHERE cc.comment_id = rh.comment_id)
        ELSE
        (SELECT CASE WHEN u.deleted_at IS NULL THEN 'Y' ELSE 'N' END FROM user u WHERE u.user_id = rh.target_member_id)
        END AS isActive
        FROM report_history rh
        JOIN report_type rt ON rh.report_type_id = rt.report_type_id
        JOIN user ru ON rh.reporter_member_id = ru.user_id
        WHERE rh.target_member_id = #{targetId}
        AND (
        (#{targetType} = 'POST' AND rh.post_id IS NOT NULL)
        OR (#{targetType} = 'COMMENT' AND rh.comment_id IS NOT NULL)
        OR (#{targetType} = 'USER' AND rh.post_id IS NULL AND rh.comment_id IS NULL)
        )
        ORDER BY rh.created_at DESC
    </select>





    <!-- 누적 신고 횟수 기준 신고자 목록 -->
    <!-- 신고자 목록 조회 (최근 신고일 추가 및 신고자 ID 필터링) -->
    <select id="selectReporterListByCount" resultType="com.learningcrew.linkup.report.query.dto.response.ReportUserCountDTO">
        SELECT
        rh.reporter_member_id AS memberId,
        ru.user_name AS memberName,
        COUNT(*) AS reportCount,
        MAX(rh.created_at) AS lastReportDate  <!-- 최근 신고일 추가 -->
        FROM report_history rh
        JOIN user ru ON rh.reporter_member_id = ru.user_id
        WHERE 1 = 1
        <if test="reporterId != null">
            AND rh.reporter_member_id = #{reporterId}  <!-- 신고자 ID 필터링 -->
        </if>
        GROUP BY rh.reporter_member_id
        ORDER BY lastReportDate DESC  <!-- 최근 신고일 기준으로 정렬 -->
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 신고자 목록 전체 건수 조회 (신고자 ID 필터링 추가) -->
    <select id="countReporterListByCount" resultType="long">
        SELECT COUNT(DISTINCT reporter_member_id)
        FROM report_history rh
        WHERE 1 = 1
        <if test="reporterId != null">
            AND rh.reporter_member_id = #{reporterId}  <!-- 신고자 ID 필터링 -->
        </if>
    </select>

    <!-- 피신고자 목록 조회 (신고 당한 횟수와 신고 점수 포함) -->
    <select id="selectReporteeListByScore" resultType="com.learningcrew.linkup.report.query.dto.response.ReportUserScoreDTO">
        SELECT
        rh.target_member_id AS memberId,
        tu.user_name AS memberName,
        COUNT(*) AS reportCount,  <!-- 신고 당한 횟수 -->
        COALESCE(SUM(rt.report_level), 0) AS reportScore  <!-- 신고 점수 합산 (NULL은 0으로 처리) -->
        FROM report_history rh
        JOIN report_type rt ON rh.report_type_id = rt.report_type_id  <!-- report_type 테이블에서 신고 레벨 참조 -->
        JOIN user tu ON rh.target_member_id = tu.user_id
        WHERE 1 = 1
        <if test="reporteeId != null">
            AND rh.target_member_id = #{reporteeId}  <!-- 피신고자 ID 필터링 -->
        </if>
        GROUP BY rh.target_member_id
        ORDER BY reportScore DESC  <!-- 신고 점수 기준으로 정렬 -->
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 피신고자 목록 전체 건수 조회 (피신고자 ID 필터링 추가) -->
    <select id="countReporteeListByScore" resultType="long">
        SELECT COUNT(DISTINCT target_member_id)
        FROM report_history rh
        WHERE 1 = 1
        <if test="reporteeId != null">
            AND rh.target_member_id = #{reporteeId}  <!-- 피신고자 ID 필터링 -->
        </if>
    </select>

</mapper>
